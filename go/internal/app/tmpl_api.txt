package {{.ID}}

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/url"

    "github.com/ccxt/ccxt/go/internal/app/{{.ID}}/models"
)

func (c *Exchange) apiRequest(method string, reqURL string, params *url.Values, body bytes.Buffer) (res *http.Response, err error) {
    baseURL, err := url.Parse(reqURL)
	if err != nil {
		return nil, err
	}
    baseURL.RawQuery = params.Encode()
    var req *http.Request
    if len(body.Bytes()) > 0 {
        req, err = http.NewRequest(method, baseURL.String(), &body)
        if err != nil {
            return nil, err
        }
        req.Header.Add("Content-Type", http.DetectContentType(body.Bytes()))
    } else {
        req, err = http.NewRequest(method, baseURL.String(), nil)
        if err != nil {
            return nil, err
        }
    }
    // TODO: Implement headers for auth or extras
    req.Header.Add("Accept", "application/json")
	res, err = c.Client.Do(req)
	if err != nil {
		return res, err
	}
	return res, nil
}
{{$baseURL := .URLs.API.Public}}{{range $api, $dataModel := .API.Public.Get}}
// PublicGet{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *Exchange) PublicGet{{apiToFuncName $api}}(params *url.Values) (data {{apiResult $dataModel}}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
    defer res.Body.Close()
	err = json.NewDecoder(res.Body).Decode(&data)
	if err != nil {
		return data, err
	}
    return data, nil
}{{end}}{{range $api, $dataModel := .API.Public.Post}}
// PublicPost{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *Exchange) PublicPost{{apiToFuncName $api}}(params *url.Values, body bytes.Buffer) (data {{apiResult $dataModel}}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
    defer res.Body.Close()
	err = json.NewDecoder(res.Body).Decode(&data)
	if err != nil {
		return data, err
	}
    return data, nil
}{{end}}
{{range $api, $dataModel := .API.Public.Put}}
// PublicPut{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *Exchange) PublicPut{{apiToFuncName $api}}(params *url.Values, body bytes.Buffer) (data {{apiResult $dataModel}}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    res, err := c.apiRequest("PUT", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
    defer res.Body.Close()
	err = json.NewDecoder(res.Body).Decode(&data)
	if err != nil {
		return data, err
	}
    return data, nil
}{{end}}
{{range $api, $dataModel := .API.Public.Delete}}
// PublicDelete{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *Exchange) PublicDelete{{apiToFuncName $api}}(params *url.Values) (data {{apiResult $dataModel}}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    res, err := c.apiRequest("DELETE", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
    defer res.Body.Close()
	err = json.NewDecoder(res.Body).Decode(&data)
	if err != nil {
		return data, err
	}
    return data, nil
}{{end}}
{{range $api, $dataModel := .API.Private.Get}}
// PrivateGet{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *Exchange) PrivateGet{{apiToFuncName $api}}(params *url.Values) (data {{apiResult $dataModel}}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
    defer res.Body.Close()
	err = json.NewDecoder(res.Body).Decode(&data)
	if err != nil {
		return data, err
	}
    return data, nil
}{{end}}
{{range $api, $dataModel := .API.Private.Post}}
// PrivatePost{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *Exchange) PrivatePost{{apiToFuncName $api}}(params *url.Values, body bytes.Buffer) (data {{apiResult $dataModel}}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
    defer res.Body.Close()
	err = json.NewDecoder(res.Body).Decode(&data)
	if err != nil {
		return data, err
	}
    return data, nil
}{{end}}{{range $api, $dataModel := .API.Private.Put}}
// PrivatePut{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *Exchange) PrivatePut{{apiToFuncName $api}}(params *url.Values, body bytes.Buffer) (data {{apiResult $dataModel}}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    res, err := c.apiRequest("PUT", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
    defer res.Body.Close()
	err = json.NewDecoder(res.Body).Decode(&data)
	if err != nil {
		return data, err
	}
    return data, nil
}{{end}}{{range $api, $dataModel := .API.Private.Delete}}
// PrivateDelete{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *Exchange) PrivateDelete{{apiToFuncName $api}}(params *url.Values) (data {{apiResult $dataModel}}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    res, err := c.apiRequest("DELETE", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
    defer res.Body.Close()
	err = json.NewDecoder(res.Body).Decode(&data)
	if err != nil {
		return data, err
	}
    return data, nil
}{{end}}
