package {{.ID}}

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	"github.com/ccxt/ccxt/go/internal/app/bitmex/models"
)

func handleBodyErr(body []byte, err error) error {
    var exErr models.Error
	if err2 := json.Unmarshal(body, &exErr); err2 == nil {
		return fmt.Errorf("%s: %s", exErr.Error.Name, exErr.Error.Message)
	}
	var any interface{}
	_ = json.Unmarshal(body, &any)
	if exErr, ok := any.(models.Error); ok {
		return fmt.Errorf("%s: %s", exErr.Error.Name, exErr.Error.Message)
	}
	return fmt.Errorf("Error with decoding: %+v", any)
}

func (c *Exchange) apiRequest(method string, reqURL string, params *url.Values, body bytes.Buffer) ([]byte, error) {
    baseURL, err := url.Parse(reqURL)
	if err != nil {
		return nil, err
	}
    baseURL.RawQuery = params.Encode()
    var req *http.Request
    if len(body.Bytes()) > 0 {
        req, err = http.NewRequest(method, baseURL.String(), &body)
        if err != nil {
            return nil, err
        }
        req.Header.Add("Content-Type", http.DetectContentType(body.Bytes()))
    } else {
        req, err = http.NewRequest(method, baseURL.String(), nil)
        if err != nil {
            return nil, err
        }
    }
    req.Header.Add("Accept", "application/json")
	c.SignRequest(req, method, baseURL, body.Bytes())
	res, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	resBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, err
	}
	if res.StatusCode >= 300 {
		err = fmt.Errorf("HTTP Response %d: %s", res.StatusCode, http.StatusText(res.StatusCode))
		return nil, handleBodyErr(resBody, err)
	}
	return resBody, nil
}

func (c *Exchange) parseEndpoint(endpoint string) string {
	baseURL := c.Info.URLs.WWW
	if c.Config.Test {
		baseURL = c.Info.URLs.Test
	}
	return baseURL + c.Info.URLs.API + endpoint
}

{{range $api, $dataModel := .API.Public.Get}}
// PublicGet{{apiToFuncName $api}} method for /{{$api}}
func (c *Exchange) PublicGet{{apiToFuncName $api}}(params *url.Values) (data {{apiResult $dataModel}}, err error) {
	reqURL := c.parseEndpoint("{{$api}}")
    res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}
{{end}}
{{range $api, $dataModel := .API.Public.Post}}
// PublicPost{{apiToFuncName $api}} method for /{{$api}}
func (c *Exchange) PublicPost{{apiToFuncName $api}}(params *url.Values, body bytes.Buffer) (data {{apiResult $dataModel}}, err error) {
    reqURL := c.parseEndpoint("{{$api}}")
    res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}
{{end}}
{{range $api, $dataModel := .API.Public.Put}}
// PublicPut{{apiToFuncName $api}} method for /{{$api}}
func (c *Exchange) PublicPut{{apiToFuncName $api}}(params *url.Values, body bytes.Buffer) (data {{apiResult $dataModel}}, err error) {
    reqURL := c.parseEndpoint("{{$api}}")
    res, err := c.apiRequest("PUT", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}
{{end}}
{{range $api, $dataModel := .API.Public.Delete}}
// PublicDelete{{apiToFuncName $api}} method for /{{$api}}
func (c *Exchange) PublicDelete{{apiToFuncName $api}}(params *url.Values) (data {{apiResult $dataModel}}, err error) {
    reqURL := c.parseEndpoint("{{$api}}")
    res, err := c.apiRequest("DELETE", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}
{{end}}
{{range $api, $dataModel := .API.Private.Get}}
// PrivateGet{{apiToFuncName $api}} method for /{{$api}}
func (c *Exchange) PrivateGet{{apiToFuncName $api}}(params *url.Values) (data {{apiResult $dataModel}}, err error) {
    reqURL := c.parseEndpoint("{{$api}}")
    res, err := c.apiRequest("GET", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}
{{end}}
{{range $api, $dataModel := .API.Private.Post}}
// PrivatePost{{apiToFuncName $api}} method for /{{$api}}
func (c *Exchange) PrivatePost{{apiToFuncName $api}}(params *url.Values, body bytes.Buffer) (data {{apiResult $dataModel}}, err error) {
    reqURL := c.parseEndpoint("{{$api}}")
    res, err := c.apiRequest("POST", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}
{{end}}
{{range $api, $dataModel := .API.Private.Put}}
// PrivatePut{{apiToFuncName $api}} method for /{{$api}}
func (c *Exchange) PrivatePut{{apiToFuncName $api}}(params *url.Values, body bytes.Buffer) (data {{apiResult $dataModel}}, err error) {
    reqURL := c.parseEndpoint("{{$api}}")
    res, err := c.apiRequest("PUT", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}
{{end}}
{{range $api, $dataModel := .API.Private.Delete}}
// PrivateDelete{{apiToFuncName $api}} method for /{{$api}}
func (c *Exchange) PrivateDelete{{apiToFuncName $api}}(params *url.Values) (data {{apiResult $dataModel}}, err error) {
    reqURL := c.parseEndpoint("{{$api}}")
    res, err := c.apiRequest("DELETE", reqURL, params, bytes.Buffer{})
    if err != nil {
        return data, err
    }
	err = json.Unmarshal(res, &data)
	if err != nil {
		return data, handleBodyErr(res, err)
	}
	return data, nil
}
{{end}}
