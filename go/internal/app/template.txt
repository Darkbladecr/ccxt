package {{.ID}}

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
import (
    "bytes"
	"encoding/json"
	"net/http"
	"time"
)

func request(method string, url string, data *interface{}, body bytes.Buffer) (err error) {
	client := &http.Client{Timeout: time.Second * 10}
    var req *http.Request
    if len(body.Bytes()) > 0 {
        req, err = http.NewRequest(method, url, &body)
        req.Header.Add("Content-Type", http.DetectContentType(body.Bytes()))
    } else {
        req, err = http.NewRequest(method, url, nil)
    }
    // TODO: Implement headers for auth or extras
	res, err := client.Do(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()
	err = json.NewDecoder(res.Body).Decode(data)
	if err != nil {
		return err
	}
	return nil
}

{{$baseURL := .URLs.API.Public}}{{$id := .ID | title}}{{range $api := .API.Public.Get}}
// PublicGet{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *{{$id}}Exchange) PublicGet{{apiToFuncName $api}}() (data interface{}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    if err = request("GET", reqURL, &data, bytes.Buffer{}); err != nil {
        return nil, err
    }
    return data, err
}{{end}}{{range $api := .API.Public.Post}}
// PublicPost{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *{{$id}}Exchange) PublicPost{{apiToFuncName $api}}(body bytes.Buffer) (data interface{}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    if err = request("POST", reqURL, &data, body); err != nil {
        return nil, err
    }
    return data, err
}{{end}}
{{range $api := .API.Public.Put}}
// PublicPut{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *{{$id}}Exchange) PublicPut{{apiToFuncName $api}}(body bytes.Buffer) (data interface{}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    if err = request("PUT", reqURL, &data, body); err != nil {
        return nil, err
    }
    return data, err
}{{end}}
{{range $api := .API.Public.Delete}}
// PublicDelete{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *{{$id}}Exchange) PublicDelete{{apiToFuncName $api}}() (data interface{}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    if err = request("DELETE", reqURL, &data, bytes.Buffer{}); err != nil {
        return nil, err
    }
    return data, err
}{{end}}
{{range $api := .API.Private.Get}}
// PrivateGet{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *{{$id}}Exchange) PrivateGet{{apiToFuncName $api}}() (data interface{}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    if err = request("GET", reqURL, &data, bytes.Buffer{}); err != nil {
        return nil, err
    }
    return data, err
}{{end}}
{{range $api := .API.Private.Post}}
// PrivatePost{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *{{$id}}Exchange) PrivatePost{{apiToFuncName $api}}(body bytes.Buffer) (data interface{}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    if err = request("POST", reqURL, &data, body); err != nil {
        return nil, err
    }
    return data, err
}{{end}}{{range $api := .API.Private.Put}}
// PrivatePut{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *{{$id}}Exchange) PrivatePut{{apiToFuncName $api}}(body bytes.Buffer) (data interface{}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    if err = request("PUT", reqURL, &data, body); err != nil {
        return nil, err
    }
    return data, err
}{{end}}{{range $api := .API.Private.Delete}}
// PrivateDelete{{apiToFuncName $api}} method for {{$baseURL}}/{{$api}}
func (c *{{$id}}Exchange) PrivateDelete{{apiToFuncName $api}}() (data interface{}, err error) {
    reqURL := "{{$baseURL}}/{{$api}}"
    if err = request("DELETE", reqURL, &data, bytes.Buffer{}); err != nil {
        return nil, err
    }
    return data, err
}{{end}}
