package {{.ID}}

// AUTOMATICALLY GENERATED, BUT NEEDS TO BE MODIFIED:
import (
	"encoding/json"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"

	"github.com/ccxt/ccxt/go/pkg/ccxt"
)

// Exchange struct
type Exchange struct {
	Client         *http.Client
	Info           ccxt.ExchangeInfo
	Config         ccxt.ExchangeConfig
	Markets        []ccxt.Market
	MarketsByID    map[string]ccxt.Market
	IDs            []string
	Symbols        []string
	Currencies     []ccxt.Currency
	CurrenciesByID map[string]ccxt.Currency
}

// Init Exchange
func Init(conf ccxt.ExchangeConfig) (*Exchange, error) {
    var info ccxt.ExchangeInfo
	configFile := "/Users/stefan/Github/ccxt/go/internal/app/{{.ID}}/{{.ID}}.json"
	f, err := os.Open(configFile)
	defer f.Close()
	if err != nil {
		return nil, fmt.Errorf("Config %s missing or errored: %v", configFile, err)
	}
	json.NewDecoder(f).Decode(&info)
	timeout := 10 * time.Second
	if conf.Timeout > 0 {
		timeout = conf.Timeout * time.Millisecond
	}
	client := &http.Client{Timeout: timeout}
	exchange := Exchange{
		Config: conf,
		Client: client,
		Info:   info,
	}
	return &exchange, nil
}

// FetchCurrencies returns ccxt.Currency
func (x *Exchange) FetchCurrencies() ([]ccxt.Currency, error) {
	currencies := x.Currencies
	return currencies, nil
}

// GetInfo returns ccxt.ExchangeInfo
func (x *Exchange) GetInfo() ccxt.ExchangeInfo {
	return x.Info
}

// GetMarkets returns []ccxt.Market
func (x *Exchange) GetMarkets() []ccxt.Market {
	return x.Markets
}

// GetCurrencies returns []ccxt.Currency
func (x *Exchange) GetCurrencies() []ccxt.Currency {
	return x.Currencies
}

// FetchMarkets and insert into the Exchange
func (x *Exchange) FetchMarkets(params *url.Values) ([]ccxt.Market, error) {
	// TODO: Complete FetchMarkets
	return nil, nil
}

// SetMarkets from exchange
func (x *Exchange) SetMarkets(markets []ccxt.Market, currencies []ccxt.Currency) []ccxt.Market {
	x.Markets = markets
	x.Symbols = make([]string, len(markets))
	x.IDs = make([]string, len(markets))
	if x.MarketsByID == nil {
		x.MarketsByID = make(map[string]ccxt.Market, len(markets))
	}
	for i, market := range markets {
		x.MarketsByID[market.ID] = market
		x.Symbols[i] = market.Symbol
		x.IDs[i] = market.ID
	}
	if currencies != nil {
		x.Currencies = currencies
	} else {
		// TODO: currencies
	}
	if x.CurrenciesByID == nil {
		x.CurrenciesByID = make(map[string]ccxt.Currency, len(currencies))
	}
	for _, currency := range currencies {
		x.CurrenciesByID[currency.ID] = currency
	}
	return x.Markets
}