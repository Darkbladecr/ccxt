// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GlobalNotification Account Notifications
// swagger:model GlobalNotification
type GlobalNotification struct {

	// body
	// Required: true
	Body *string `json:"body"`

	// closable
	Closable *bool `json:"closable,omitempty"`

	// date
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`

	// id
	ID int32 `json:"id,omitempty"`

	// persist
	Persist *bool `json:"persist,omitempty"`

	// sound
	Sound string `json:"sound,omitempty"`

	// title
	// Required: true
	Title *string `json:"title"`

	// ttl
	// Required: true
	TTL *int32 `json:"ttl"`

	// type
	// Enum: [success error info]
	Type string `json:"type,omitempty"`

	// wait for visibility
	WaitForVisibility *bool `json:"waitForVisibility,omitempty"`
}

// Validate validates this global notification
func (m *GlobalNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalNotification) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *GlobalNotification) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GlobalNotification) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *GlobalNotification) validateTTL(formats strfmt.Registry) error {

	if err := validate.Required("ttl", "body", m.TTL); err != nil {
		return err
	}

	return nil
}

var globalNotificationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","error","info"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		globalNotificationTypeTypePropEnum = append(globalNotificationTypeTypePropEnum, v)
	}
}

const (

	// GlobalNotificationTypeSuccess captures enum value "success"
	GlobalNotificationTypeSuccess string = "success"

	// GlobalNotificationTypeError captures enum value "error"
	GlobalNotificationTypeError string = "error"

	// GlobalNotificationTypeInfo captures enum value "info"
	GlobalNotificationTypeInfo string = "info"
)

// prop value enum
func (m *GlobalNotification) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, globalNotificationTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GlobalNotification) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GlobalNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalNotification) UnmarshalBinary(b []byte) error {
	var res GlobalNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
