// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserEvent User Events for auditing
// swagger:model UserEvent
type UserEvent struct {

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// created by Id
	// Required: true
	CreatedByID *float64 `json:"createdById"`

	// event meta
	EventMeta interface{} `json:"eventMeta,omitempty"`

	// event status
	// Enum: [success failure]
	EventStatus string `json:"eventStatus,omitempty"`

	// event type
	// Enum: [apiKeyCreated deleverageExecution depositConfirmed depositPending banZeroVolumeApiUser liquidationOrderPlaced login pgpMaskedEmail pgpTestEmail passwordChanged positionStateLiquidated positionStateWarning resetPasswordConfirmed resetPasswordRequest transferCanceled transferCompleted transferReceived transferRequested twoFactorDisabled twoFactorEnabled withdrawalCanceled withdrawalCompleted withdrawalConfirmed withdrawalRequested verify]
	EventType string `json:"eventType,omitempty"`

	// geoip country
	// Max Length: 2
	GeoipCountry string `json:"geoipCountry,omitempty"`

	// geoip region
	// Max Length: 3
	GeoipRegion string `json:"geoipRegion,omitempty"`

	// geoip sub region
	// Max Length: 3
	GeoipSubRegion string `json:"geoipSubRegion,omitempty"`

	// id
	ID float64 `json:"id,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// status
	// Required: true
	// Enum: [success failure]
	Status *string `json:"status"`

	// type
	// Required: true
	// Enum: [apiKeyCreated deleverageExecution depositConfirmed depositPending banZeroVolumeApiUser liquidationOrderPlaced login pgpMaskedEmail pgpTestEmail passwordChanged positionStateLiquidated positionStateWarning resetPasswordConfirmed resetPasswordRequest transferCanceled transferCompleted transferReceived transferRequested twoFactorDisabled twoFactorEnabled withdrawalCanceled withdrawalCompleted withdrawalConfirmed withdrawalRequested verify]
	Type *string `json:"type"`

	// user Id
	// Required: true
	UserID *float64 `json:"userId"`
}

// Validate validates this user event
func (m *UserEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedByID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoipCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoipRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoipSubRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserEvent) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserEvent) validateCreatedByID(formats strfmt.Registry) error {

	if err := validate.Required("createdById", "body", m.CreatedByID); err != nil {
		return err
	}

	return nil
}

var userEventTypeEventStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","failure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userEventTypeEventStatusPropEnum = append(userEventTypeEventStatusPropEnum, v)
	}
}

const (

	// UserEventEventStatusSuccess captures enum value "success"
	UserEventEventStatusSuccess string = "success"

	// UserEventEventStatusFailure captures enum value "failure"
	UserEventEventStatusFailure string = "failure"
)

// prop value enum
func (m *UserEvent) validateEventStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userEventTypeEventStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserEvent) validateEventStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EventStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventStatusEnum("eventStatus", "body", m.EventStatus); err != nil {
		return err
	}

	return nil
}

var userEventTypeEventTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["apiKeyCreated","deleverageExecution","depositConfirmed","depositPending","banZeroVolumeApiUser","liquidationOrderPlaced","login","pgpMaskedEmail","pgpTestEmail","passwordChanged","positionStateLiquidated","positionStateWarning","resetPasswordConfirmed","resetPasswordRequest","transferCanceled","transferCompleted","transferReceived","transferRequested","twoFactorDisabled","twoFactorEnabled","withdrawalCanceled","withdrawalCompleted","withdrawalConfirmed","withdrawalRequested","verify"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userEventTypeEventTypePropEnum = append(userEventTypeEventTypePropEnum, v)
	}
}

const (

	// UserEventEventTypeAPIKeyCreated captures enum value "apiKeyCreated"
	UserEventEventTypeAPIKeyCreated string = "apiKeyCreated"

	// UserEventEventTypeDeleverageExecution captures enum value "deleverageExecution"
	UserEventEventTypeDeleverageExecution string = "deleverageExecution"

	// UserEventEventTypeDepositConfirmed captures enum value "depositConfirmed"
	UserEventEventTypeDepositConfirmed string = "depositConfirmed"

	// UserEventEventTypeDepositPending captures enum value "depositPending"
	UserEventEventTypeDepositPending string = "depositPending"

	// UserEventEventTypeBanZeroVolumeAPIUser captures enum value "banZeroVolumeApiUser"
	UserEventEventTypeBanZeroVolumeAPIUser string = "banZeroVolumeApiUser"

	// UserEventEventTypeLiquidationOrderPlaced captures enum value "liquidationOrderPlaced"
	UserEventEventTypeLiquidationOrderPlaced string = "liquidationOrderPlaced"

	// UserEventEventTypeLogin captures enum value "login"
	UserEventEventTypeLogin string = "login"

	// UserEventEventTypePgpMaskedEmail captures enum value "pgpMaskedEmail"
	UserEventEventTypePgpMaskedEmail string = "pgpMaskedEmail"

	// UserEventEventTypePgpTestEmail captures enum value "pgpTestEmail"
	UserEventEventTypePgpTestEmail string = "pgpTestEmail"

	// UserEventEventTypePasswordChanged captures enum value "passwordChanged"
	UserEventEventTypePasswordChanged string = "passwordChanged"

	// UserEventEventTypePositionStateLiquidated captures enum value "positionStateLiquidated"
	UserEventEventTypePositionStateLiquidated string = "positionStateLiquidated"

	// UserEventEventTypePositionStateWarning captures enum value "positionStateWarning"
	UserEventEventTypePositionStateWarning string = "positionStateWarning"

	// UserEventEventTypeResetPasswordConfirmed captures enum value "resetPasswordConfirmed"
	UserEventEventTypeResetPasswordConfirmed string = "resetPasswordConfirmed"

	// UserEventEventTypeResetPasswordRequest captures enum value "resetPasswordRequest"
	UserEventEventTypeResetPasswordRequest string = "resetPasswordRequest"

	// UserEventEventTypeTransferCanceled captures enum value "transferCanceled"
	UserEventEventTypeTransferCanceled string = "transferCanceled"

	// UserEventEventTypeTransferCompleted captures enum value "transferCompleted"
	UserEventEventTypeTransferCompleted string = "transferCompleted"

	// UserEventEventTypeTransferReceived captures enum value "transferReceived"
	UserEventEventTypeTransferReceived string = "transferReceived"

	// UserEventEventTypeTransferRequested captures enum value "transferRequested"
	UserEventEventTypeTransferRequested string = "transferRequested"

	// UserEventEventTypeTwoFactorDisabled captures enum value "twoFactorDisabled"
	UserEventEventTypeTwoFactorDisabled string = "twoFactorDisabled"

	// UserEventEventTypeTwoFactorEnabled captures enum value "twoFactorEnabled"
	UserEventEventTypeTwoFactorEnabled string = "twoFactorEnabled"

	// UserEventEventTypeWithdrawalCanceled captures enum value "withdrawalCanceled"
	UserEventEventTypeWithdrawalCanceled string = "withdrawalCanceled"

	// UserEventEventTypeWithdrawalCompleted captures enum value "withdrawalCompleted"
	UserEventEventTypeWithdrawalCompleted string = "withdrawalCompleted"

	// UserEventEventTypeWithdrawalConfirmed captures enum value "withdrawalConfirmed"
	UserEventEventTypeWithdrawalConfirmed string = "withdrawalConfirmed"

	// UserEventEventTypeWithdrawalRequested captures enum value "withdrawalRequested"
	UserEventEventTypeWithdrawalRequested string = "withdrawalRequested"

	// UserEventEventTypeVerify captures enum value "verify"
	UserEventEventTypeVerify string = "verify"
)

// prop value enum
func (m *UserEvent) validateEventTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userEventTypeEventTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserEvent) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventTypeEnum("eventType", "body", m.EventType); err != nil {
		return err
	}

	return nil
}

func (m *UserEvent) validateGeoipCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.GeoipCountry) { // not required
		return nil
	}

	if err := validate.MaxLength("geoipCountry", "body", string(m.GeoipCountry), 2); err != nil {
		return err
	}

	return nil
}

func (m *UserEvent) validateGeoipRegion(formats strfmt.Registry) error {

	if swag.IsZero(m.GeoipRegion) { // not required
		return nil
	}

	if err := validate.MaxLength("geoipRegion", "body", string(m.GeoipRegion), 3); err != nil {
		return err
	}

	return nil
}

func (m *UserEvent) validateGeoipSubRegion(formats strfmt.Registry) error {

	if swag.IsZero(m.GeoipSubRegion) { // not required
		return nil
	}

	if err := validate.MaxLength("geoipSubRegion", "body", string(m.GeoipSubRegion), 3); err != nil {
		return err
	}

	return nil
}

var userEventTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","failure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userEventTypeStatusPropEnum = append(userEventTypeStatusPropEnum, v)
	}
}

const (

	// UserEventStatusSuccess captures enum value "success"
	UserEventStatusSuccess string = "success"

	// UserEventStatusFailure captures enum value "failure"
	UserEventStatusFailure string = "failure"
)

// prop value enum
func (m *UserEvent) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userEventTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserEvent) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var userEventTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["apiKeyCreated","deleverageExecution","depositConfirmed","depositPending","banZeroVolumeApiUser","liquidationOrderPlaced","login","pgpMaskedEmail","pgpTestEmail","passwordChanged","positionStateLiquidated","positionStateWarning","resetPasswordConfirmed","resetPasswordRequest","transferCanceled","transferCompleted","transferReceived","transferRequested","twoFactorDisabled","twoFactorEnabled","withdrawalCanceled","withdrawalCompleted","withdrawalConfirmed","withdrawalRequested","verify"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userEventTypeTypePropEnum = append(userEventTypeTypePropEnum, v)
	}
}

const (

	// UserEventTypeAPIKeyCreated captures enum value "apiKeyCreated"
	UserEventTypeAPIKeyCreated string = "apiKeyCreated"

	// UserEventTypeDeleverageExecution captures enum value "deleverageExecution"
	UserEventTypeDeleverageExecution string = "deleverageExecution"

	// UserEventTypeDepositConfirmed captures enum value "depositConfirmed"
	UserEventTypeDepositConfirmed string = "depositConfirmed"

	// UserEventTypeDepositPending captures enum value "depositPending"
	UserEventTypeDepositPending string = "depositPending"

	// UserEventTypeBanZeroVolumeAPIUser captures enum value "banZeroVolumeApiUser"
	UserEventTypeBanZeroVolumeAPIUser string = "banZeroVolumeApiUser"

	// UserEventTypeLiquidationOrderPlaced captures enum value "liquidationOrderPlaced"
	UserEventTypeLiquidationOrderPlaced string = "liquidationOrderPlaced"

	// UserEventTypeLogin captures enum value "login"
	UserEventTypeLogin string = "login"

	// UserEventTypePgpMaskedEmail captures enum value "pgpMaskedEmail"
	UserEventTypePgpMaskedEmail string = "pgpMaskedEmail"

	// UserEventTypePgpTestEmail captures enum value "pgpTestEmail"
	UserEventTypePgpTestEmail string = "pgpTestEmail"

	// UserEventTypePasswordChanged captures enum value "passwordChanged"
	UserEventTypePasswordChanged string = "passwordChanged"

	// UserEventTypePositionStateLiquidated captures enum value "positionStateLiquidated"
	UserEventTypePositionStateLiquidated string = "positionStateLiquidated"

	// UserEventTypePositionStateWarning captures enum value "positionStateWarning"
	UserEventTypePositionStateWarning string = "positionStateWarning"

	// UserEventTypeResetPasswordConfirmed captures enum value "resetPasswordConfirmed"
	UserEventTypeResetPasswordConfirmed string = "resetPasswordConfirmed"

	// UserEventTypeResetPasswordRequest captures enum value "resetPasswordRequest"
	UserEventTypeResetPasswordRequest string = "resetPasswordRequest"

	// UserEventTypeTransferCanceled captures enum value "transferCanceled"
	UserEventTypeTransferCanceled string = "transferCanceled"

	// UserEventTypeTransferCompleted captures enum value "transferCompleted"
	UserEventTypeTransferCompleted string = "transferCompleted"

	// UserEventTypeTransferReceived captures enum value "transferReceived"
	UserEventTypeTransferReceived string = "transferReceived"

	// UserEventTypeTransferRequested captures enum value "transferRequested"
	UserEventTypeTransferRequested string = "transferRequested"

	// UserEventTypeTwoFactorDisabled captures enum value "twoFactorDisabled"
	UserEventTypeTwoFactorDisabled string = "twoFactorDisabled"

	// UserEventTypeTwoFactorEnabled captures enum value "twoFactorEnabled"
	UserEventTypeTwoFactorEnabled string = "twoFactorEnabled"

	// UserEventTypeWithdrawalCanceled captures enum value "withdrawalCanceled"
	UserEventTypeWithdrawalCanceled string = "withdrawalCanceled"

	// UserEventTypeWithdrawalCompleted captures enum value "withdrawalCompleted"
	UserEventTypeWithdrawalCompleted string = "withdrawalCompleted"

	// UserEventTypeWithdrawalConfirmed captures enum value "withdrawalConfirmed"
	UserEventTypeWithdrawalConfirmed string = "withdrawalConfirmed"

	// UserEventTypeWithdrawalRequested captures enum value "withdrawalRequested"
	UserEventTypeWithdrawalRequested string = "withdrawalRequested"

	// UserEventTypeVerify captures enum value "verify"
	UserEventTypeVerify string = "verify"
)

// prop value enum
func (m *UserEvent) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userEventTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserEvent) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *UserEvent) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserEvent) UnmarshalBinary(b []byte) error {
	var res UserEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
